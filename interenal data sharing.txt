//HUB SIDE CODE 
#include <WiFi.h>
#include <WiFiClient.h>
#include <WiFiServer.h>
#include <Wire.h>
WiFiServer server(80);
WiFiClient clients[4];
const int numClients = 4; // Number of client connections to expect
const char* ssid = "iPhone";
const char* password = "ashit@123";
void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  server.begin();
  Serial.println("Server started");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

void loop() {
  // Check for new client connections
  if (server.hasClient()) {
    for (int i = 0; i < numClients; i++) {
      // Find an available slot in the clients array
      if (!clients[i] || !clients[i].connected()) {
        if (clients[i]) {
          clients[i].stop(); // Disconnect any previous connection
        }
        clients[i] = server.available(); // Accept the new client connection    
        break;
      }
    }
  }

  // Process data from connected clients
  for (int i = 0; i < numClients; i++) {
    if (clients[i] && clients[i].connected()) {
      if (clients[i].available()) {
        String data = clients[i].readStringUntil('\n');
        Serial.print(" data: ");
        Serial.println(data);
        // Extract client ID from the data (assuming it is sent as "ID: data")
        int colonIndex = data.indexOf(':');
        if (colonIndex != -1) {
          String clientId = data.substring(0, colonIndex);
          String clientData = data.substring(colonIndex + 1);

          // Process clientData from the client with clientId
          // Add your code here to analyze the data and control the LED pins
        }
        // Send command to the client
        clients[i].println("LED_ON");  // Example command to turn on LED pins
        clients[i].println("LED_OFF"); // Example command to turn off LED pins
      }
    }
    else {
      // Client disconnected
      clients[i].stop();
    }
  }
}










//CLIENT SIDE CODE 
#include <WiFi.h>
#include <WiFiClient.h>

const char* ssid = "YourWiFiNetwork";
const char* password = "YourWiFiPassword";
const char* serverIP = "HubESPIPAddress";
const int serverPort = 80;
const String clientId = "ESP32_1"; // Unique identifier for the client

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  Serial.println("Connected to WiFi");
}

void loop() {
  WiFiClient client;

  if (client.connect(serverIP, serverPort)) {
    // Generate random voltage and current values
    float voltage = random(220, 240) + random(0, 99) / 100.0; // Range: 220V to 240V
    float current = random(5, 15) + random(0, 99) / 100.0; // Range: 5A to 15A

    // Create the data string with the client ID
    String data = clientId + ": Voltage: " + String(voltage) + "V, Current: " + String(current) + "A";
    client.println(data);

    // Receive commands from the hub ESP32
    while (client.available()) {
      String command = client.readStringUntil('\n');

      if (command == "LED_ON") {
        // Code to turn on the LED pins
      } else if (command == "LED_OFF") {
        // Code to turn off the LED pins
      }
    }

    client.stop();
    Serial.println("Data sent and received");
  }

  delay(5000); // Send data every 5 seconds
}
