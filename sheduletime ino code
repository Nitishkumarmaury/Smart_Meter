#include <WiFi.h>
#include <FirebaseESP32.h>
#include <ArduinoJson.h>
#include <TimeLib.h>

// Replace with your network credentials
const char* ssid = "iPhone";
const char* password = "ashit@123";

// Replace with your Firebase project credentials
#define FIREBASE_HOST "timer-6df08-default-rtdb.firebaseio.com"
#define FIREBASE_AUTH "KXK5N8ODdwkKdIyHZaSCILRJx1zFjikdH7clkINF"

FirebaseData firebaseData;
const String schedulePath = "/schedule";

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  
  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
  Firebase.reconnectWiFi(true);
  
  // Set ESP32 time from an NTP server
  configTime(0, 0, "pool.ntp.org");
  while (!time(nullptr)) {
    delay(1000);
    Serial.println("Waiting for time synchronization...");
  }
}

void loop() {
  // Get current time
  time_t now = time(nullptr);
  struct tm* timeinfo;
  timeinfo = localtime(&now);
  
  // Get scheduled start and end times from Firebase
  if (Firebase.getString(firebaseData, schedulePath)) {
    String schedule = firebaseData.to<String>();
    Serial.println("Received schedule: " + schedule);
    
    // StaticJsonDocument to store the parsed JSON
    StaticJsonDocument<200> jsonDoc;
    DeserializationError error = deserializeJson(jsonDoc, schedule);
    
    // Check if parsing was successful
    if (error) {
      Serial.print("Parsing failed: ");
      Serial.println(error.c_str());
      return;
    }
    
    int startHour = jsonDoc["startTime"]["hour"];
    int startMinute = jsonDoc["startTime"]["minute"];
    int endHour = jsonDoc["endTime"]["hour"];
    int endMinute = jsonDoc["endTime"]["minute"];
    
    // Convert scheduled time to seconds since midnight
    time_t startTime = startHour * 3600 + startMinute * 60;
    time_t endTime = endHour * 3600 + endMinute * 60;
    time_t currentTime = timeinfo->tm_hour * 3600 + timeinfo->tm_min * 60 + timeinfo->tm_sec;
    
    // Check if current time is within the scheduled range
    if (currentTime >= startTime && currentTime < endTime) {
      // Turn LED on
      Serial.println("LED ON");
      // Write your code here to control the LED (e.g., digitalWrite(LED_PIN, HIGH);)
    } else {
      // Turn LED off
      Serial.println("LED OFF");
      // Write your code here to control the LED (e.g., digitalWrite(LED_PIN, LOW);)
    }
  }

  delay(1000); // Adjust delay as per your requirements
}
